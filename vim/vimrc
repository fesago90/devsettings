set nocompatible
set encoding=utf-8

" no noises
set visualbell
" no screen flashes
set t_vb=

" no backup files
set nobackup
set noswapfile

" Sets the <Leader> key
let mapleader=","

" Allow buffer switching without saving
set hidden

" Enable filetype plugins
filetype on
filetype plugin on
filetype indent on

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Always show current position
set ruler

" Highlight current line
set cursorline

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Show line number
set number
" Show relative line numbers
set rnu

" Makes search act like search in modern browsers (incremental search)
set incsearch
" Case insensitive search
set ignorecase
" Case sensitive if uppercase is typed
set smartcase

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=3

" Enable syntax highlighting
syntax on

" Airline - Don't use fancy symbols
let g:airline_symbols_ascii=1

" NERDTree - don't use fancy arrows
let g:NERDTreeDirArrowCollapsable="-"
let g:NERDTreeDirArrowExpandable="+"

" rust.vim / syntastic: use cargo for syntax checking
let g:syntastic_rust_checkers = ['cargo']

" auto install Plug.vim  ... hmm...
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" fzf - ctrl+p for file search
nmap <C-p> :Files<cr>
" fzf - ctrl+b for open buffers
nmap <C-b> :Buffers<cr>

nnoremap <C-f> :set number! \| :set rnu!<cr>

" fzf - bindings within fzf buffer
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-i': 'split',
  \ 'ctrl-s': 'vsplit' }


let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "!{.git,node_modules,vendor}/*" '
" fzf - use :F to initiate ripgrep search
command! -bang -nargs=* F call fzf#vim#grep(g:rg_command . shellescape(<q-args>), 1, <bang>0)


" NOTE: Don't forget to run :PlugInstall
call plug#begin('~/.vim/pluggyplugs/')
" install, initialize fzf
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
call plug#end()

" VimClojure highlighting features
let vimclojure#HighlightBuiltins=1
let vimclojure#ParenRainbow=1

" Start pathogen
execute pathogen#infect()

" Persist settings; e.g. window size, gvim menu settings
" set to 0 to disable
let g:setting_restore=0
" Don't ignore vimrc settings
" set 1 to ignore vimrc
let g:setting_ignores_vimrc=0


if has("gui_running")
    set guioptions=cm
    set lines=50
    set columns=134

    if has("gui_win32")
        "set guifont=Meslo\ LG\ M\ DZ\ for\ Powerline:h8
        "set guifont=Inconsolata\ for\ Powerline:h12
        set guifont=Consolas:h10
    elseif has("gui_macvim")
        set guifont=Menlo:h11
    endif
    " Show eyecandy
    "let g:airline_powerline_fonts=1
    " Don't show trailing space warning
    let g:airline#extensions#whitespace#enabled=0
else
    " disable Background Color Erase, otherwise terminal background color
    " may bleed into Vim's
    "set t_ut=
    set background=dark
    " use the standard 256 color palette; solarized-dark background color will be gray
    let g:solarized_termcolors=256
    colorscheme solarized
endif

" Always show status line
set laststatus=2
" Hide the default mode text (e.g. -- INSERT -- below the status line)
set noshowmode

if !empty(glob("~/.google_vimrc"))
    source $HOME/.google_vimrc
endif

call g:background_updater#StartBackgroundUpdater()
